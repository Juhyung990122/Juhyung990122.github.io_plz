{"componentChunkName":"component---src-templates-blog-post-js","path":"/Django/2021-01-04/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fe05f559-66ef-52b3-b0bf-56ed309611e4","excerpt":"🌟Django cache 🎯캐시란? 캐시는 프로세서의 속도를 따라가지 못하는 메인메모리를 보완하여 \n처리속도를 빠르게 개선하기 위한 장치입니다. \n위키백과에는 다음과 같이 정의되어있습니다. “데이터나 값을 미리 복사해서 놓는 임시 장소를 의미한다.”\n정의된 대로 캐시는 주 메모리 이외에 캐시메모리라는 공간을 의미하며 \n이 공간에 데이터를 미리 복사해두고 아래와 같은 데이터에 빠르게 접근할 수 있게끔 해줍니다.…","html":"<h2 id=\"django-cache\" style=\"position:relative;\"><a href=\"#django-cache\" aria-label=\"django cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟Django cache</h2>\n<h3 id=\"캐시란\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EB%9E%80\" aria-label=\"캐시란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯캐시란?</h3>\n<p>캐시는 프로세서의 속도를 따라가지 못하는 메인메모리를 보완하여\n처리속도를 빠르게 개선하기 위한 장치입니다.\n위키백과에는 다음과 같이 정의되어있습니다.</p>\n<blockquote>\n<p>“데이터나 값을 미리 복사해서 놓는 임시 장소를 의미한다.”\n정의된 대로 캐시는 주 메모리 이외에 캐시메모리라는 공간을 의미하며\n이 공간에 데이터를 미리 복사해두고 아래와 같은 데이터에 빠르게 접근할 수 있게끔 해줍니다.</p>\n</blockquote>\n<p><strong>1. 자주 접근하게 되는 경우</strong>\n‘자주 접근한다’는 <code class=\"language-text\">지역성의 원리</code>에 기반하여 판단합니다.\n지역성은 <code class=\"language-text\">시간지역성</code>과 <code class=\"language-text\">공간지역성</code>으로 나뉘어집니다.\n<strong>- 시간지역성</strong>\n최근 접근한 데이터에 다시 접근하는 경향\n<strong>- 공간지역성</strong>\n접근한 데이터 주변에 있는 데이터에 다시 접근하는 경향\n<strong>2. 값을 다시 계산하여 써야하는데 이 계산시간이 오래 걸리는 경우</strong></p>\n<p>또한 캐시는 반응속도 자체가 빠른 SRAM임과 동시에\n주소가 키로 주어졌을떄 바로 접근할 수 있는 해시테이블 형식의 하드웨어이므로\n접근시간자체도 O(1)정도로 매우 빨라 시스템 성능향상에 큰 역할을 합니다.</p>\n<h3 id=\"캐시의-동작방식\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"캐시의 동작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯캐시의 동작방식</h3>\n<p>웹서버가 캐시에 접근하는 원리는 다음과 같습니다.</p>\n<ul>\n<li>Look aside cache\n<strong>1. CPU에서 메모리 가상주소를 사용하여 캐시메모리에 접근한다.</strong>\n<strong>2. MMU라는 관리장치에서 가상주소를 번역하여 메모리의 물리주소로 변환한다.</strong>(데이터 저장방식에 따라 물리주소가 다르게 변환된다.)\n<strong>3. 변환한 주소에 찾는 데이터가 있는지 확인한다.</strong>\n<strong>if  캐시내에 있다면?</strong>\n캐시된 데이터를 보여준다.\n<strong>if  캐시내에 없다면?</strong>\n데이터를 가져오고 캐시에 저장한뒤 보여준다.</li>\n<li>Write back\n<strong>1. CPU에서 사용할 데이터를 캐시에 기록한다.</strong>\n<strong>2. 사용 후 블록단위로 캐시의 내용을 삭제할 때 메모리에 저장한다.</strong>\n해당 방식의 특성상 캐시와 메모리 사이 업데이트 시기가 달라\n데이터가 일치하지않는 inconsisteny가 발생할 수 있습니다.</li>\n<li>Write through\n<strong>1. CPU에서 사용할 데이터를 캐시와 메모리내에 기록한다.</strong>\ninconsistency나 loss가 발생하지 않는다는 장점이 있으나\n메모리 자체가 느리다면 성능저하가 발생합니다.</li>\n</ul>\n<h3 id=\"장고가-지원하는-캐시유형\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EA%B0%80-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%BA%90%EC%8B%9C%EC%9C%A0%ED%98%95\" aria-label=\"장고가 지원하는 캐시유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯장고가 지원하는 캐시유형</h3>\n<p>장고에서 지원하는 기본 캐시 중 가장 빠르고 효율적인 것은 <code class=\"language-text\">Memcached</code> 입니다.\nDB나 API호출 이후 받아오는 결과데이터를 작은단위(청크)의 key-value 형태로 <code class=\"language-text\">메모리</code>에 저장하는 형식이며\nCPU가 처리할 데이터를 임시로 저장하는 RAM에 데이터 및 오브젝트를 캐시함으로써\n데이터를 읽는 횟수를 줄이는 방식을 사용합니다. 이를 통해 디스크를 거치지 않으므로\n속도가 매우 빠르다는 장점도 있습니다.\nMemcached를 사용하면 서버단에서는 부족한 메모리를 충족시키기 더욱 좋아지는데요.\n<strong>- 기존</strong>\n하나의 웹서버에서 쓸 수 있는 메모리가 정해져있고,\n한 서버당 정해진 크기의 메모리만 사용할 수 있습니다.\n<strong>- Memcached 도입 후</strong>\n웹서버에서 쓸 수 있는 메모리들을 논리적으로 결합시켜\n각각의 웹서버는 전체 메모리 캐시 크기만큼 사용할 수 있게 됩니다.</p>\n<p>이처럼 Memcached를 사용하면 웹서버들이 할당된 메모리가 아닌\n전체 캐시 크기만큼 메모리를 사용할 수 있어 부족한 메모리를 쉽게 융통할 수 있습니다.</p>\n<p><strong>참고</strong>\n<a href=\"https://docs.djangoproject.com/en/3.1/topics/cache/\">https://docs.djangoproject.com/en/3.1/topics/cache/</a>\n<a href=\"https://testdriven.io/blog/django-caching/#:~:text=Redis%20vs%20Memcached,%2C%20key%2Dvalue%20data%20stores.&#x26;text=Redis%2C%20on%20the%20other%20hand,in%20a%20pub%2Fsub%20system\">https://testdriven.io/blog/django-caching/#:~:text=Redis%20vs%20Memcached,%2C%20key%2Dvalue%20data%20stores.&#x26;text=Redis%2C%20on%20the%20other%20hand,in%20a%20pub%2Fsub%20system</a>.\n<a href=\"https://ko.wikipedia.org/wiki/Memcached\">https://ko.wikipedia.org/wiki/Memcached</a>\n<a href=\"http://milooy.github.io/TIL/Django/django-cache.html#%E1%84%8F%E1%85%A2%E1%84%89%E1%85%B5\">http://milooy.github.io/TIL/Django/django-cache.html#%E1%84%8F%E1%85%A2%E1%84%89%E1%85%B5</a>\n<a href=\"https://parksb.github.io/article/29.html#:~:text=%F0%9F%92%B5%20%EC%BA%90%EC%8B%9C%EA%B0%80%20%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%20%EC%95%84%EC%A3%BC%20%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8%20%EC%9B%90%EB%A6%AC,-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EB%A1%9C%20%EA%B5%AC%ED%98%84&#x26;text=%EA%B8%B0%EC%88%A0%EC%9D%98%20%EB%B0%9C%EC%A0%84%EC%9C%BC%EB%A1%9C%20%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C,%EB%B0%94%EB%A1%9C%20%EC%BA%90%EC%8B%9C(Cache)%EB%8B%A4\">https://parksb.github.io/article/29.html#:~:text=%F0%9F%92%B5%20%EC%BA%90%EC%8B%9C%EA%B0%80%20%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%20%EC%95%84%EC%A3%BC%20%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8%20%EC%9B%90%EB%A6%AC,-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EB%A1%9C%20%EA%B5%AC%ED%98%84&#x26;text=%EA%B8%B0%EC%88%A0%EC%9D%98%20%EB%B0%9C%EC%A0%84%EC%9C%BC%EB%A1%9C%20%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C,%EB%B0%94%EB%A1%9C%20%EC%BA%90%EC%8B%9C(Cache)%EB%8B%A4</a>.\n<a href=\"http://melonicedlatte.com/computerarchitecture/2019/02/12/203749.html\">http://melonicedlatte.com/computerarchitecture/2019/02/12/203749.html</a></p>","frontmatter":{"title":"[Django]캐시의 정의와 동작원리","date":"January 04, 2021"}}},"pageContext":{"slug":"/Django/2021-01-04/","previous":{"fields":{"slug":"/Bigdata_log/2020-11-23-TIL/"},"frontmatter":{"title":"[Bigdata]하둡실행 에러정리","category":"Bigdata_log","draft":false}},"next":{"fields":{"slug":"/Git/2021-01-05-TIL/"},"frontmatter":{"title":"[Git]Git 원격저장소 되돌리기","category":"Git","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}