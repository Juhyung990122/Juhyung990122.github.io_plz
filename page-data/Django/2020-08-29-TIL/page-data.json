{"componentChunkName":"component---src-templates-blog-post-js","path":"/Django/2020-08-29-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"41efa622-4d44-5f11-8054-9276b7ce0c70","excerpt":"🌟Django CBV 🎯CBV란? CBV란 클래스형 뷰의 약자로 Class로 views.py를 구성하는 것을 의미합니다.\n다른 말로는 제네릭뷰(generic view)라고도 합니다.\nCBV는 장고에서 자주 쓰는 기능들을 클래스로 미리 구현해 둔 것이라\n상속과 오버라이딩을 사용할 수 있는데 이를 통해 중복되는 코드를 최소화시켜 \n가독성과 효율을 높일 수 있습니다. 🎯CBV 사용방법 공식문서\nCBV…","html":"<h2 id=\"django-cbv\" style=\"position:relative;\"><a href=\"#django-cbv\" aria-label=\"django cbv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟Django CBV</h2>\n<h3 id=\"cbv란\" style=\"position:relative;\"><a href=\"#cbv%EB%9E%80\" aria-label=\"cbv란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯CBV란?</h3>\n<p>CBV란 클래스형 뷰의 약자로 Class로 views.py를 구성하는 것을 의미합니다.\n다른 말로는 제네릭뷰(generic view)라고도 합니다.\nCBV는 장고에서 자주 쓰는 기능들을 클래스로 미리 구현해 둔 것이라\n상속과 오버라이딩을 사용할 수 있는데 이를 통해 중복되는 코드를 최소화시켜\n가독성과 효율을 높일 수 있습니다.</p>\n<h3 id=\"cbv-사용방법\" style=\"position:relative;\"><a href=\"#cbv-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"cbv 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯CBV 사용방법</h3>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/ref/class-based-views/\">공식문서</a>\nCBV는 크게 용도에 따라 상속받을 제네릭뷰를 선택하고, 해당 제네릭뷰에서\n제공하는 메소드를 용도에 맞게 상속해 쓰거나 오버라이딩하여 사용하면 됩니다.\n자주 쓰는 제네릭뷰는 다음과 같습니다.</p>\n<h4 id=\"cbv-baseview\" style=\"position:relative;\"><a href=\"#cbv-baseview\" aria-label=\"cbv baseview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯CBV BaseView</h4>\n<p>뷰 클래스를 생성하는 기본 제네릭 뷰입니다. </p>\n<ul>\n<li>\n<p><strong>View</strong>\n가장 기본적인 View로 제네릭뷰 중에서도 최상위에 있는 부모클래스입니다.\n주로 HTTP 메소드별로 액션을 정의할때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HTTPResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> HTTPResonse<span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#이런식으로 표현해도 되고</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>template_name<span class=\"token punctuation\">)</span> <span class=\"token comment\">#이런식으로도 가능</span></code></pre></div>\n</li>\n<li>\n<p><strong>TemplateView</strong>\n주어진 템플릿으로 랜더링해주는 뷰입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HTTPResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> TemplateView\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span><span class=\"token punctuation\">(</span>TemplateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_context_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#넘겨주는 데이터 추가/변경 메소드</span>\n        context <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_context_data<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token comment\">#부모클래스에서 context 값을 받아옴</span>\n        context<span class=\"token punctuation\">[</span><span class=\"token string\">'object_ilst'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#context에 쿼리값 추가</span>\n        <span class=\"token keyword\">return</span> context</code></pre></div>\n</li>\n</ul>\n<h4 id=\"cbv-generic-display-view\" style=\"position:relative;\"><a href=\"#cbv-generic-display-view\" aria-label=\"cbv generic display view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯CBV Generic Display View</h4>\n<p>객체의 목록이나 상세정보를 보여주는 뷰 입니다.\nDisplay View를 사용하기 위해서는 기본적으로 다음의 과정을 거칩니다.</p>\n<ol>\n<li>어떤 테이블의 객체리스트를 가져올건지 지정(속성변수 model이나 queryset, 메소드 get_queryset 오버라이딩)</li>\n<li>해당 객체를 랜더링 할 템플릿 파일위치 지정(속성변수 template_name)</li>\n<li>템플릿 파일로 넘겨줄 객체리스트의 이름 지정(속성변수 context<em>object</em>name)</li>\n<li>+) 페이지네이션(속성변수 paginate_by)</li>\n<li>\n<p><strong>DetailView</strong>\n조건을 정하고 그에 맞는 객체의 상세내역을 보여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HTTPResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> DetailView\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> ExampleModel <span class=\"token comment\">#객체가 있는 모델</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">'detail.html'</span> \n    <span class=\"token comment\">#별도의 지정값이 없으면 url에서 넘어온 pk값으로 구분하여 랜더링</span></code></pre></div>\n</li>\n<li>\n<p><strong>ListView</strong>\n조건을 정하고 그에 맞는 객체들의 목록을 보여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HTTPResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> ListView\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span><span class=\"token punctuation\">(</span>ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> ExampleModel <span class=\"token comment\"># 객체가 있는 모델</span>\n    <span class=\"token comment\">#queryset = ExampleModel.objects.all()로도 표현가능</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">'list.html'</span> \n    <span class=\"token comment\">#별도의 지정값이 없으면 url에서 넘어온 pk값으로 구분하여 랜더링</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"url-패턴-매핑\" style=\"position:relative;\"><a href=\"#url-%ED%8C%A8%ED%84%B4-%EB%A7%A4%ED%95%91\" aria-label=\"url 패턴 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯URL 패턴 매핑</h3>\n<p>view에서 사용했던 CBV를 호출하여 페이지를 랜더링하려면 <code class=\"language-text\">as_view()</code>라는 메소드를 호출해야합니다.\n해당 메소드는 지정된 클래스의 인스턴스를 생성한 후,\n인스턴스의 dispatch 메소드를 호출하여 요청을 검사합니다.\n검사 후 정의된 HTTP 메소드라면 해당 요청에 맞는 동작을, 정의되지 않은 메소드라면\nHttpResponseNotAllowed 라는 예외처리를 해줍니다.</p>\n<p>참고\n<a href=\"https://wikidocs.net/9623\">https://wikidocs.net/9623</a>\n<a href=\"https://dowtech.tistory.com/4\">https://dowtech.tistory.com/4</a></p>","frontmatter":{"title":"[Django] CBV 알아보기","date":"August 29, 2020"}}},"pageContext":{"slug":"/Django/2020-08-29-TIL/","previous":{"fields":{"slug":"/Django/2020-08-26-TIL/"},"frontmatter":{"title":"[Django] Settings.py 분리하기","category":"Django","draft":false}},"next":{"fields":{"slug":"/Frontend_log/2020-09-01-TIL/"},"frontmatter":{"title":"[우아한 테크러닝] 1회차 정리","category":"Frontend_log","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}