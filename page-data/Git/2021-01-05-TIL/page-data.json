{"componentChunkName":"component---src-templates-blog-post-js","path":"/Git/2021-01-05-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7a072987-9a66-5f0e-9ae2-fe9fb91200ca","excerpt":"🌟Git…","html":"<h2 id=\"git-원격저장소-되돌리기\" style=\"position:relative;\"><a href=\"#git-%EC%9B%90%EA%B2%A9%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"git 원격저장소 되돌리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟Git 원격저장소 되돌리기</h2>\n<p>너무 살떨리는 경험이였어서 기록합니다..ㅎ\n컴퓨터가 실수에서 배우는게 많지만 이럴때마다 심장철렁하는건 어쩔수가 없네요</p>\n<p>발단을 간단하게 얘기하자면 포크떠놓은 레포를 본 레포와 동기화시키려고 병합을 했는데\n나중에 알아보니 이는 <code class=\"language-text\">포크 레포를 본 레포에 반영 시키는 것</code> 였더라고요.\n완전 반대로 생각했었습니다.. 으휴\n아무튼 제 목표는 머지했던 코드를 이전으로 되돌리는 것 이었습니다.</p>\n<p><strong>❗들어가기에 앞서 주의사항!.</strong>\n저는 모든 작업 내용을 원격에 푸시한 뒤, 머지만 하고 이후에 다른 작업은 하지 않았습니다.\n다음에 나올 ‘머지직전 커밋으로 시점을 되돌린다’ 는 ‘머지 전 상태가 가장 마지막 상태이다’ 를 가정하고\n진행하는 것이며, 만일 머지 후 무언가를 작업하셨다면 어딘가에 백업해두시길 바랍니다(커밋시점을 되돌리면 그 내용들은 날아가니까요.)</p>\n<h3 id=\"--머지직전-커밋으로-시점되돌리기\" style=\"position:relative;\"><a href=\"#--%EB%A8%B8%EC%A7%80%EC%A7%81%EC%A0%84-%EC%BB%A4%EB%B0%8B%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%A0%90%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"  머지직전 커밋으로 시점되돌리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯  머지직전 커밋으로 시점되돌리기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git reset --hard HEAD~커밋하는게 상위로부터 몇번째인지</code></pre></div>\n<p>해당 명령어를 통해 동기화하기 직전, 즉 내가 남기고 싶은 코드들로 상태를 바꿔줍니다.\n이상태에서 git push origin master하게되면 로컬이 원격보다 뒤에있는데 푸시한다고 에러가나게 됩니다.\n일반적으로는 <code class=\"language-text\">로컬에서 수정한 내용을 원격에 반영</code> 하는 순이였지만\n지금상태는 <code class=\"language-text\">원격에 반영은 됐지만 로컬은 반영 전 시점인데?</code> 라서 생기는 에러인데\n당최 뭔말이냐 싶으신 분들을 위해 비유적으로 표현해볼까 합니다.\n지금 창의력이 빛나는 시간대가 아니라 예시가 구리지만 로컬이 잡지사고 원격이 구독자라고 해봅시다.\n정상적인 순서를 비유해보자면 다음과 같습니다.</p>\n<blockquote>\n<p>잡지사가 구독자에게 잡지를 보내줍니다. 구독자는 그 잡지를 읽고 정보를 머리속에 넣습니다.</p>\n</blockquote>\n<p>근데 지금나는 에러를 이 예시로 표현해본다면 다음과 같아집니다.</p>\n<blockquote>\n<p>잡지사는 구독자를 위한 잡지를 아직 보내지 않았는데,\n구독자는 이미 그 잡지에 대한 정보가 머릿속에 있습니다. </p>\n</blockquote>\n<p>이상하죠? 지금 깃이 보기에는 이렇게 이상한 상황인겁니다.\n그럼 이걸 어떻게 해결할까요? </p>\n<h3 id=\"-되돌린-사실을-커밋으로-남기기\" style=\"position:relative;\"><a href=\"#-%EB%90%98%EB%8F%8C%EB%A6%B0-%EC%82%AC%EC%8B%A4%EC%9D%84-%EC%BB%A4%EB%B0%8B%EC%9C%BC%EB%A1%9C-%EB%82%A8%EA%B8%B0%EA%B8%B0\" aria-label=\" 되돌린 사실을 커밋으로 남기기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 되돌린 사실을 커밋으로 남기기</h3>\n<p>구독자 머릿속에서 정보를 지우는 대신 잘못된 정보가 있었다고 알려주는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git revert --no-commit HEAD~되돌리고싶은 커밋 시작..되돌리고싶은 커밋 끝\ngit commit -m &quot;revert commit 어쩌구&quot;\ngit push origin 브랜치명</code></pre></div>\n<p>이렇게 해주면 이전작업들의 이력은 남아있지만 원격저장소에서는 사라지며\n되돌리고싶은 커밋의 시점으로 이동되어있습니다.\n또한 이때 어떤 커밋시점으로 되돌아갔는지를 커밋으로 남겨둘 수 있습니다.\n예시로 라버트를 진행하면</p>\n<p>1-2-3-4 의 커밋이 있다면\n1 = 나 4로 되돌아갈거임! 4까지의 코드는 없는걸로 치자!\n2 = 코드에서는 삭제(뭐했는지는 남아있음)\n3 = 코드에서는 삭제(뭐했는지는 남아있음)\n4 = 코드는 이상태로 돌아와있음.</p>\n<p>이런식으로 남게됩니다.</p>\n<h3 id=\"--로컬저장소의-커밋을-원격으로-덮어씌우기\" style=\"position:relative;\"><a href=\"#--%EB%A1%9C%EC%BB%AC%EC%A0%80%EC%9E%A5%EC%86%8C%EC%9D%98-%EC%BB%A4%EB%B0%8B%EC%9D%84-%EC%9B%90%EA%B2%A9%EC%9C%BC%EB%A1%9C-%EB%8D%AE%EC%96%B4%EC%94%8C%EC%9A%B0%EA%B8%B0\" aria-label=\"  로컬저장소의 커밋을 원격으로 덮어씌우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯  로컬저장소의 커밋을 원격으로 덮어씌우기</h3>\n<p>외쳐볼까요 오블리비아테..^-^<br>\n<img src=\"https://33.media.tumblr.com/6dfe58fe587cc923e3828d43a0ffebd6/tumblr_mkwd37FsRb1r43qb9o1_500.gif\"><br>\n구독자한테 마법을 걸어서 정보를 지우고 아무일 없다는 듯이 잡지를 건네는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push -f origin master</code></pre></div>\n<p>이렇게 원격저장소의 기억을 지우고 로컬이 새거인것마냥 강제로 push를 하게되면\n부끄러운 과오를 남기지 않을 수 있습니다. 대신 협업중인데 다른팀원이 그새 풀해가서 작업하고 있었고,\n이 작업이 끝난 뒤 푸시하면? 과오도 다시 업로드된다는 단점이 있습니다.</p>\n<h3 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 결론</h3>\n<p>이런걸 방지하기 위해서는 앞서말한 revert가 더 나을 것 같군요.\n실제로도 revert가 더 자주 사용되는 방법이고, 덮어씌우기는 단독으로 프로젝트를 할때처럼\n커밋을 어떻게 구워삶아도 별 타격이 없을때 쓰시는게 좋을 듯 합니다!\n뭐 이러나 저러나 실수로 인해 하게되는 고생(?)이니\n다음부턴 웬만하면 이렇게 되돌리지말고 처음부터 제대로 하는걸로…\n잘하자 주형아…^-^</p>","frontmatter":{"title":"[Git]Git 원격저장소 되돌리기","date":"January 05, 2021"}}},"pageContext":{"slug":"/Git/2021-01-05-TIL/","previous":{"fields":{"slug":"/Django/2021-01-04/"},"frontmatter":{"title":"[Django]캐시의 정의와 동작원리","category":"Django","draft":false}},"next":{"fields":{"slug":"/Django/2021-01-07TIL/"},"frontmatter":{"title":"[Django]Redis를 활용한 캐싱","category":"Django","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}