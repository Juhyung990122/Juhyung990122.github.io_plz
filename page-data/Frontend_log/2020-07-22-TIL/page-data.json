{"componentChunkName":"component---src-templates-blog-post-js","path":"/Frontend_log/2020-07-22-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f24e582e-1783-59f5-90df-ebc4f726d393","excerpt":"🌟Vue Life cycle 🎯인스턴스 생명주기란? 인스턴스 상태에 따라 호출할 수 있는 속성들을 의미합니다.\n비동기 통신을 처리할 때 유용히 사용되는 개념입니다. 🎯Vue.js의 라이프사이클 Vue.js 는 크게 4가지의 라이프사이클로 나뉩니다. 🎯creation 가장 먼저 실행되는 훅을 포함합니다.\n서버를 렌더링할때, 즉 전반적인 프로젝트 랜더링 시점에도 사용할 수 있습니다. 따라서 프로젝트가 시작되기 전에 처리해야 할 훅을 여기에 포함시키면 됩니다.  beforecreate…","html":"<h2 id=\"vue-life-cycle\" style=\"position:relative;\"><a href=\"#vue-life-cycle\" aria-label=\"vue life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟Vue Life cycle</h2>\n<h3 id=\"인스턴스-생명주기란\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0%EB%9E%80\" aria-label=\"인스턴스 생명주기란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯인스턴스 생명주기란?</h3>\n<p>인스턴스 상태에 따라 호출할 수 있는 속성들을 의미합니다.\n비동기 통신을 처리할 때 유용히 사용되는 개념입니다.</p>\n<h3 id=\"vuejs의-라이프사이클\" style=\"position:relative;\"><a href=\"#vuejs%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"vuejs의 라이프사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Vue.js의 라이프사이클</h3>\n<p>Vue.js 는 크게 4가지의 라이프사이클로 나뉩니다.</p>\n<h4 id=\"creation\" style=\"position:relative;\"><a href=\"#creation\" aria-label=\"creation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯creation</h4>\n<p>가장 먼저 실행되는 훅을 포함합니다.\n서버를 렌더링할때, 즉 전반적인 프로젝트 랜더링 시점에도 사용할 수 있습니다. 따라서 프로젝트가 시작되기 전에 처리해야 할 훅을 여기에 포함시키면 됩니다. </p>\n<ul>\n<li><strong>beforecreate</strong>\n가장 먼저 실행되는 훅입니다. 데이터와 이벤트 생성 전이니 접근이 불가하므로, 이를 사용하지 않는 테스크를 실행해야 합니다.(data,event 사용 불가)</li>\n<li><strong>Created</strong>\n데이터와 이벤트를 초기화 한 뒤에 실행되는 훅입니다.\n따라서 데이터와 이벤트에 접근할 수 있습니다. 하지만 아직 템플릿과 DOM은 렌더링되지 않은 상태입니다.(el 사용 불가)</li>\n</ul>\n<h4 id=\"mounting\" style=\"position:relative;\"><a href=\"#mounting\" aria-label=\"mounting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Mounting</h4>\n<p>돔을 삽입하는 단계입니다. 템플릿을 읽어와서 해당 값을 랜더링 하기 직전에 컴포넌트에 접근하는 훅을 포함합니다. </p>\n<ul>\n<li><strong>beforeMount</strong>\n첫 렌더링 직전에 실행되는 훅입니다.\n서버사이드 랜더링은 서버에서 내려온 돔과 데이터를 마운트하는 것을 의미합니다.\n이때 서버에서 실행된 정보와 클라이언트에서 실행된 정보가 다르면 오류가 발생하므로\n데이터를 초기화할땐 이 훅에서 말고 created 훅에서 하는 것이 좋습니다.</li>\n<li><strong>Mounted</strong>\n랜더링 된 컴포넌트와 템플릿. 돔에 접근할 수 있는 훅입니다.\nel을 사용할 수 있는 첫 구간이며 자식 컴포넌트부터 실행됩니다.</li>\n</ul>\n<h4 id=\"updating\" style=\"position:relative;\"><a href=\"#updating\" aria-label=\"updating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Updating</h4>\n<p>재렌더링이 이루어지는 단계입니다.\n컴포넌트에서 사용하는 데이터나 타 속성들이 업데이트 되면 실행되는 훅들을 포함합니다. </p>\n<ul>\n<li><strong>beforeupdate</strong>\n컴포넌트 데이터가 업데이트 되어 돔이 재렌더링되기 직전에 실행되는 훅입니다.</li>\n<li><strong>updated</strong>\n재렌더링이 일어난 후에 실행되는 훅입니다. 돔이 재랜더링된 후에 접근하므로 돔과 관련된 연산은 할 수 없습니다.</li>\n</ul>\n<h4 id=\"destruction\" style=\"position:relative;\"><a href=\"#destruction\" aria-label=\"destruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Destruction</h4>\n<p>Vue 인스턴스를 메모리에서 해제하는 단계입니다. 서버렌더링 시 호출되지 않으며\n컴포넌트에 걸린 이벤트와 뷰 인스턴스를 제거하는 훅을 포함합니다.</p>\n<ul>\n<li><strong>beforedestroy</strong>\nVue 인스턴스 제거 직전에 호출되는 훅입니다.\n이벤트 리스너를 제거할 때 사용합니다.</li>\n<li><strong>destroyed</strong>\nVue 인스턴스 제거 후에 호출되는 훅입니다.\nVue의 모든 데이터와 이벤트, 디렉티브를 제거하고 인스턴스 자체도 삭제합니다.</li>\n</ul>\n<p>(<a href=\"https://blog.martinwork.co.kr/vuejs/2018/02/05/vue-lifecycle-hooks.html\">참고1</a>)\n(<a href=\"https://blog.martinwork.co.kr/vuejs/2018/02/05/vue-lifecycle-hooks.html\">참고2</a>)</p>","frontmatter":{"title":"[Vue.js] 생명주기 정리","date":"July 22, 2020"}}},"pageContext":{"slug":"/Frontend_log/2020-07-22-TIL/","previous":{"fields":{"slug":"/DRF/2020-07-21-TIL/"},"frontmatter":{"title":"[DRF] REST API 개념정리","category":"DRF","draft":false}},"next":{"fields":{"slug":"/Frontend_log/2020-07-25-TIL/"},"frontmatter":{"title":"[Vue.js] Vue 튜토리얼","category":"Frontend_log","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}