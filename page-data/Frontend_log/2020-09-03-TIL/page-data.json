{"componentChunkName":"component---src-templates-blog-post-js","path":"/Frontend_log/2020-09-03-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ed9622fc-2874-58b5-ab5f-af69ef7fe3b1","excerpt":"🌟우아한 테크러닝 2회차 🎯javascript overview 자바스크립트의 함수\n값을 무조건적으로 반환하게 합니다.\n변수 안에 함수를 값으로 취급하여 넣을 수 있습니다. 여기서 bar()을 호출하면 const bar를 호출하는 것입니다. immediately call\n프로그래밍 코드에서 함수를 한번만 호출되게끔 할때는\n이름없이 선언할 수 있으며 맨 뒤에 ()를 붙여 호출합니다. 콜백함수\n어떤 함수에게 함수의 호출을 위임하는 것을 콜백함수라고 합니다.\n+)HOC…","html":"<h2 id=\"우아한-테크러닝-2회차\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC%EB%9F%AC%EB%8B%9D-2%ED%9A%8C%EC%B0%A8\" aria-label=\"우아한 테크러닝 2회차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟우아한 테크러닝 2회차</h2>\n<h3 id=\"javascript-overview\" style=\"position:relative;\"><a href=\"#javascript-overview\" aria-label=\"javascript overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯javascript overview</h3>\n<ul>\n<li>\n<p><strong>자바스크립트의 함수</strong>\n값을 무조건적으로 반환하게 합니다.\n변수 안에 함수를 값으로 취급하여 넣을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//함수를 값으로 취급할떄는 function() 이름없는 함수 가능.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 bar()을 호출하면 const bar를 호출하는 것입니다.</p>\n</li>\n<li><strong>immediately call</strong>\n프로그래밍 코드에서 함수를 한번만 호출되게끔 할때는\n이름없이 선언할 수 있으며 맨 뒤에 ()를 붙여 호출합니다.</li>\n<li><strong>콜백함수</strong>\n어떤 함수에게 함수의 호출을 위임하는 것을 콜백함수라고 합니다.\n+)HOC -> 입력된 컴포넌트를 업그레이드 하여 컴포넌트 상태로 출력하는 것을 의미합니다.</li>\n<li>\n<p><strong>화살표함수</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//함수 내 1줄이면 return 안씀</span>\n<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//리턴값없으면 undefined 반환</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트 코드는 식과 문으로 이루어져 있습니다.\n위의 화살표 함수는 함수가 값을 반환함으로서 식에 참여했을 때 사용합니다.</p>\n<ul>\n<li>식\n코드를 실행했을때 값으로 마무리되는 라인\n세미콜론 있음\nex) 0, 3+10, function()</li>\n<li>문\n식을 제외한 나머자는 문\n세미콜론 없음\nex) if, switch, while, for</li>\n</ul>\n</li>\n<li>\n<p><strong>new 연산자</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//함수명이 대문자면 무조건 new로 호출</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//동적바인딩</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//인스턴스객체</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>new 는 자바스크립트에서 공증한 온전한 객체를 만들 수 있는 함수입니다.\njavascript는 항상 출처를 검사하는데, new 를 통해 객체를 생성하게 되면\n자바스크립트에서 자체적으로 객체의 형태를 확인할 때 온전한 형태라고 인식합니다.\n객체를 생성할때는 this를 사용하여 호출 시 함수에 새로운 객체를 전달하고\n이렇게 전달 된 객체에 요소들을 내부적으로 동적바인딩하여 생성합니다.\n(프로토타입이라는 매커니즘 사용)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//class 를 사용하면 좀더 명시적인 코드작성 가능.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">bar</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>EC6에서는 객체 생성을 좀더 명시적으로 하기 위하여 클래스가 등장합니다.</p>\n</li>\n<li>\n<p><strong>this 와 closer</strong></p>\n<ul>\n<li>\n<p><strong>this</strong>\n자바스크립트는 this를 해석할 때 실행 컨택스트 맥락상\n해당 함수를 호출할 때의 소유자를 판단하여 그 소유자로 해석합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'이주형'</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//this는 person   </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//정상작동</span>\n\n<span class=\"token keyword\">const</span> man <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//소유자가 벗겨짐</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//호출자가 없어서 전역객체에 연결(this가 person 이 아닌 window객체가 되므로 에러)</span></code></pre></div>\n<p>위의 코드에서는 getName의 소유자인 person이 this 가 되겠네요.\n하지만 그 아래에 있는 man처럼 소유자가 벗겨진 형태로 getName을 할당하게 되면\nman 을 호출했을때는 호출자가 없어서 전역객체인 window에 연결됩니다,\n이렇게 벗겨진 호출에 대해서는 this를 사용자가 직접 지정해주기 위하여\nbind,call함수를 사용합니다.(arrow에서는 제외)</p>\n</li>\n<li>\n<p><strong>closure</strong>\nclosure는 보호하고싶은 값이 있을때 사용.\n영역을 지정하고 캡처하여, 외부에서 임의로 값을 입력,수정하는 것을 막을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nage<span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//이 명령어 막고싶을때</span>\nperson<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MakePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//클로저가 이 함수를 캡쳐해서</span>\n    <span class=\"token comment\">//age에 접근할 수 있는건 getAge만 가능</span>\n    <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    age <span class=\"token operator\">=</span> x <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span><span class=\"token number\">130</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> age\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//클로저 캡처로 getage와 setage로만 값 접근 가능하게 만듬. </span>\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token function\">MakePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"동기-비동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0\" aria-label=\"동기 비동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯동기 비동기</h3>\n</li>\n<li>\n<p><strong>Promise</strong>\n비동기 방식은 사람의 생각과는 다르게 움직이는데\n코드 뎁스가 깊어지면서 에러잡기가 어려워짐에 따라 프로미스가 등장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n<span class=\"token punctuation\">{</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'응답'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//성공</span>\n<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실패</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//프로미스 안에는 then이 있음</span>\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//성공하면 여기 있는 함수 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//실패하면 여기있는 함수 호출</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>async await</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delay</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ms</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//delay 함수 호출시 프로미스 객체 반환</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트는 싱글스레드이기때문에 제어권을 브라우저에게 넘겨주지않으면 브라우저가 정지됩니다.\n이럴땐 async를 넣어 awiat라는 프로미스 객체를 반환하고\nresolve호출시 반환값을 리턴값처럼 넘겨줍니다.\ntry catch로 예외처리를 하게되면 reject시 예외는 catch에 걸립니다.</p>\n</li>\n</ul>\n<p>+)pending 상태</p>\n<ul>\n<li>\n<p><strong>커링테크닉</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redux의-원리\" style=\"position:relative;\"><a href=\"#redux%EC%9D%98-%EC%9B%90%EB%A6%AC\" aria-label=\"redux의 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Redux의 원리</h3>\n<p>리덕스의 기본 컨셉은 다음과 같습니다.\n1. 앱에 쓰이는 상태를 한군데에 몰아넣고 이를 store 객체라는 이름의 객체에 넣어줍니다.\n2. 이 객체를 컴포넌트한테 흘려보내 줍니다.\n3. 이렇게 흘려보내게 되면 각자 컴포넌트들은 흘러가는 객체 속 데이터중에\n자신에게 필요한것만 뽑아서 화면에 그립니다.</p>\n<p>리액트가 나오기 전에는 이 컨셉을 구현하는 것이 불가능했습니다.\n객체 속 데이터 중 하나만 바뀌어도 자바스크립트가 돔에 직접 접근해서\n전체 화면을 전부 다시 그려야하는게 효율적이지 못하기 때문입니다.</p>\n<p>하지만 리액트에서 virtual dom 이라는 개념을 가지고 나오기 시작하면서\n랜더링 흐름이 다음과 같이 바뀌었습니다.\nJsx -> vdom(데이터 수정) -> dom<br>\nvdom(데이터 수정 전)\n이런 구조를 통해 자바스크립트가 직접적으로 dom 에 접근하는 대신\nvdom을 통해 한번 걸러서 접근하고, 만약 이 구조내에서 Ui내의 데이터를 수정하게 된다면\nreact는 수정된 데이터를 기반으로 새롭게 vdom 을 만들어서 기존의 vdom과 비교 한 뒤\n수정된 데이터만 dom 에 반영합니다.  </p>","frontmatter":{"title":"[우아한 테크러닝] 2회차 정리","date":"September 03, 2020"}}},"pageContext":{"slug":"/Frontend_log/2020-09-03-TIL/","previous":{"fields":{"slug":"/Frontend_log/2020-09-01-TIL/"},"frontmatter":{"title":"[우아한 테크러닝] 1회차 정리","category":"Frontend_log","draft":false}},"next":{"fields":{"slug":"/Java/2020-09-05-TIL/"},"frontmatter":{"title":"[Java] 자바 내용정리","category":"Java","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}